name: "Lychee Broken Link Checker"
description: "Quickly check links in Markdown, HTML, and text files"
inputs:
  args:
    description: "Lychee arguments (https://github.com/lycheeverse/lychee#commandline-parameters)"
    default: "--verbose --no-progress './**/*.md' './**/*.html' './**/*.rst'"
    required: false
  debug:
    description: "Enable debug output in action (set -x). Helpful for troubleshooting."
    default: false
    required: false
  fail:
    description: "Fail entire pipeline on error (i.e. when lychee exit code is not 0)"
    default: true
    required: false
  failIfEmpty:
    description: "Fail entire pipeline if no links were found"
    default: true
    required: false
  format:
    description: "Summary output format (e.g. json)"
    default: "markdown"
    required: false
  jobSummary:
    description: "Write GitHub job summary at the end of the job (written on Markdown output only)"
    default: true
    required: false
  lycheeVersion:
    description: "Use custom version of lychee link checker"
    default: v0.19.1
    required: false
  output:
    description: "Summary output file path"
    default: "lychee/out.md"
    required: false
  checkbox:
    description: "Add Markdown Styled Checkboxes to the output"
    default: true
    required: false
  token:
    description: "Your GitHub Access Token, defaults to: {{ github.token }}"
    default: ${{ github.token }}
    required: false
  workingDirectory:
    description: "Directory to run lychee in"
    default: "."
    required: false
outputs:
  exit_code:
    description: "The exit code returned from Lychee"
    value: ${{ steps.run-lychee.outputs.exit_code }}
runs:
  using: "composite"
  steps:
    - name: Set up environment
      run: |
        echo "$HOME/.local/bin" >> "$GITHUB_PATH"
        mkdir -p "$HOME/.local/bin"
      shell: bash
    - name: Clean up existing lychee binary
      run: |
        # Remove any existing lychee binary to prevent conflicts
        rm -f "$HOME/.local/bin/lychee"
      shell: bash
    - name: Download and extract lychee in temp directory
      id: lychee-setup
      run: |
        # Create a temporary directory for downloads and extraction
        TEMP_DIR="${RUNNER_TEMP}/lychee-download"
        mkdir -p "${TEMP_DIR}"
        cd "${TEMP_DIR}"

        ARCH=$(uname -m)
        # Determine filename and download URL based on version
        if [[ "${LYCHEE_VERSION}" =~ ^v0\.0|^v0\.1[0-5]\. ]]; then
          FILENAME="lychee-${LYCHEE_VERSION}-${ARCH}-unknown-linux-gnu.tar.gz"
          DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/${LYCHEE_VERSION}/${FILENAME}"
        else
          FILENAME="lychee-${ARCH}-unknown-linux-gnu.tar.gz"
          if [[ "${LYCHEE_VERSION}" == 'nightly' ]]; then
            DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/nightly/${FILENAME}"
          elif [[ "${LYCHEE_VERSION}" == 'latest' ]]; then
            DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/latest/download/${FILENAME}"
          else
            DOWNLOAD_URL="https://github.com/lycheeverse/lychee/releases/download/lychee-${LYCHEE_VERSION}/${FILENAME}"
          fi
        fi

        echo "Downloading from: ${DOWNLOAD_URL}"
        curl -sfLO "${DOWNLOAD_URL}"

        echo "Extracting ${FILENAME}"
        tar -xvzf "${FILENAME}"

        # Output temp directory for use in later steps
        echo "temp_dir=${TEMP_DIR}" >> $GITHUB_OUTPUT
      env:
        LYCHEE_VERSION: ${{ inputs.lycheeVersion }}
      shell: bash
    - name: Install lychee
      run: |
        # Install lychee from the temporary directory
        install -t "$HOME/.local/bin" -D "${{ steps.lychee-setup.outputs.temp_dir }}/lychee"
      shell: bash
    - name: Run Lychee
      id: run-lychee
      working-directory: ${{ inputs.workingDirectory }}
      run: ${{ github.action_path }}/entrypoint.sh
      env:
        # https://github.com/actions/runner/issues/665
        INPUT_TOKEN: ${{ inputs.TOKEN }}
        INPUT_ARGS: ${{ inputs.ARGS }}
        INPUT_DEBUG: ${{ inputs.DEBUG }}
        INPUT_FAIL: ${{ inputs.FAIL }}
        INPUT_FAILIFEMPTY: ${{ inputs.FAILIFEMPTY }}
        INPUT_FORMAT: ${{ inputs.FORMAT }}
        INPUT_JOBSUMMARY: ${{ inputs.JOBSUMMARY }}
        INPUT_CHECKBOX: ${{ inputs.CHECKBOX }}
        INPUT_OUTPUT: ${{ inputs.OUTPUT }}
      shell: bash
branding:
  icon: "external-link"
  color: "purple"
